# Generated by Django 5.2.4 on 2025-07-21 10:17

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, help_text="User's phone number", max_length=15, null=True)),
                ('address', models.TextField(blank=True, help_text="User's residential address", null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_number', models.CharField(help_text='Unique identifier for the account.', max_length=20, unique=True)),
                ('account_type', models.CharField(choices=[('Checking', 'Checking Account'), ('Savings', 'Savings Account'), ('Investment', 'Investment Account')], help_text='The type of this account (e.g., Checking, Savings).', max_length=20)),
                ('balance', models.DecimalField(decimal_places=2, default=0.0, help_text='Current balance of the account.', max_digits=15)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the account was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the account was last updated.')),
                ('user', models.ForeignKey(help_text='The user who owns this account.', on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
                'unique_together': {('user', 'account_type')},
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('transaction_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this transaction.', primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, help_text='The amount of money involved in the transaction.', max_digits=15)),
                ('transaction_type', models.CharField(choices=[('Transfer', 'Account Transfer'), ('Deposit', 'Deposit'), ('Withdrawal', 'Withdrawal'), ('Purchase', 'Purchase'), ('Bill Payment', 'Bill Payment'), ('Salary', 'Salary Deposit')], help_text='The type of transaction.', max_length=50)),
                ('description', models.CharField(blank=True, help_text='A brief description of the transaction.', max_length=255, null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='The exact time and date of the transaction.')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Reversed', 'Reversed')], default='Pending', help_text='The current status of the transaction.', max_length=20)),
                ('hash', models.CharField(blank=True, help_text="SHA-256 hash of this transaction's data for integrity.", max_length=64, null=True, unique=True)),
                ('previous_block_hash', models.CharField(blank=True, help_text='SHA-256 hash of the previous transaction in the ledger chain.', max_length=64, null=True)),
                ('metadata', models.JSONField(blank=True, help_text='Optional JSON field for additional transaction details.', null=True)),
                ('receiver_account', models.ForeignKey(blank=True, help_text='The account to which funds were received (optional).', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='received_transactions', to='core.account')),
                ('sender_account', models.ForeignKey(help_text='The account from which funds were sent.', on_delete=django.db.models.deletion.PROTECT, related_name='sent_transactions', to='core.account')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'ordering': ['timestamp'],
            },
        ),
    ]
